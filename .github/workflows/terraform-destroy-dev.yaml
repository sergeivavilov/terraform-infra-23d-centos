# this is a temporary workaround pipeline
# that's only necessary because we don't have separate Staging and Production account yet
name: 'Workflow - Terraform Destroy before merge'

on:
  pull_request_review:
    types: [submitted]

env:
    AWS_REGION : "us-east-1"
    ENVIRONMENT_STAGE: "dev"
# permission can be added at job level or workflow level
permissions:
    id-token: write   # This is required for requesting the JWT
    contents: read    # This is required for actions/checkout
jobs:
  destroy_dev:
    # if PR is into main branch,
    # and if PR approval was received
    if: github.event.pull_request.base.ref == 'main' && github.event.review.state == 'APPROVED'
    runs-on: ubuntu-latest
    # default settings to apply for all the steps
    defaults:
      run:
        working-directory: ./roots/devops-project-main
        shell: bash
    environment: dev
    steps:
      # equivalent of "git clone repo"
      - uses: actions/checkout@v3

      # login to AWS
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          role-session-name: GitHubActionsRoleSession
          aws-region: ${{ env.AWS_REGION }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          terraform init -backend-config="bucket=${AWS_ACCOUNT_ID}-state-bucket-${ENVIRONMENT_STAGE}" -backend-config="key=${{ github.event.pull_request.head.ref }}.tfstate"

      # Destroy all resources before merge into main branch
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false -var-file=${ENVIRONMENT_STAGE}.tfvars
